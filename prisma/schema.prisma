generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model advertisements {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  mechanic_id String?    @db.Uuid
  image_url   String
  click_count Int?       @default(0)
  created_at  DateTime   @default(now()) @db.Timestamptz(6)
  mechanics   mechanics? @relation(fields: [mechanic_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model appointments {
  id                          String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  mechanic_id                 String                       @db.Uuid
  customer_id                 String                       @db.Uuid
  appointment_date            DateTime                     @db.Timestamptz(6)
  created_at                  DateTime                     @default(now()) @db.Timestamptz(6)
  status                      String
  vehicle_id                  String                       @db.Uuid
  start_time                  DateTime                     @db.Timestamptz(6)
  end_time                    DateTime                     @db.Timestamptz(6)
  description                 String?
  appointment_type            AppointmentType
  location_id                 String?                      @db.Uuid
  customers                   customers                    @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  locations                   locations?                   @relation(fields: [location_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  mechanics                   mechanics                    @relation(fields: [mechanic_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  customer_vehicles           customer_vehicles            @relation(fields: [vehicle_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_appointments_vehicle_id")
  ratings_reviews             ratings_reviews?
  vehicle_maintenance_records vehicle_maintenance_records?
}

model brands {
  id                          String                        @id @db.Uuid
  name                        String                        @unique
  campaign_brands             campaign_brands[]
  customer_vehicles           customer_vehicles[]
  mechanic_supported_vehicles mechanic_supported_vehicles[]
  models                      models[]
}

model campaign_categories {
  id          String     @id(map: "campaign_categories_new_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  campaign_id String     @db.Uuid
  category_id String     @db.Uuid
  campaigns   campaigns  @relation(fields: [campaign_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "campaign_categories_new_campaign_id_fkey")
  categories  categories @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "campaign_categories_new_category_id_fkey")
}

model campaigns {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  mechanic_id         String                @db.Uuid
  title               String
  description         String?
  discount_rate       Decimal               @db.Decimal(5, 2)
  valid_until         DateTime              @db.Timestamptz(6)
  created_at          DateTime              @db.Timestamptz(6)
  campaign_brands     campaign_brands[]
  campaign_categories campaign_categories[]
  mechanics           mechanics             @relation(fields: [mechanic_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model customer_vehicles {
  id                          String                        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id                 String                        @db.Uuid
  brand_id                    String                        @db.Uuid
  model_id                    String                        @db.Uuid
  model_year_id               String                        @db.Uuid
  variant_id                  String                        @db.Uuid
  plate_number                String?                       @unique
  created_at                  DateTime                      @default(now()) @db.Timestamptz(6)
  appointments                appointments[]
  brands                      brands                        @relation(fields: [brand_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  customers                   customers                     @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  models                      models                        @relation(fields: [model_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  model_years                 model_years                   @relation(fields: [model_year_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  variants                    variants                      @relation(fields: [variant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  vehicle_maintenance_records vehicle_maintenance_records[]
}

model customers {
  id                          String                        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                     String                        @db.Uuid
  created_at                  DateTime?                     @default(now()) @db.Timestamptz(6)
  appointments                appointments[]
  customer_vehicles           customer_vehicles[]
  users                       users                         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ratings_reviews             ratings_reviews[]
  vehicle_maintenance_records vehicle_maintenance_records[]
}

model mechanic_supported_vehicles {
  mechanic_id String    @db.Uuid
  brand_id    String    @db.Uuid
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  brands      brands    @relation(fields: [brand_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  mechanics   mechanics @relation(fields: [mechanic_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([mechanic_id, brand_id], map: "unique_mechanic_brand")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model mechanics {
  id                          String                        @id @db.Uuid
  user_id                     String                        @db.Uuid
  business_name               String
  on_site_service             Boolean?                      @default(false)
  average_rating              Int?                          @db.SmallInt
  created_at                  DateTime                      @default(now()) @db.Timestamptz(6)
  advertisements              advertisements[]
  appointments                appointments[]
  campaigns                   campaigns[]
  mechanic_categories         mechanic_categories[]
  mechanic_supported_vehicles mechanic_supported_vehicles[]
  mechanic_working_hours      mechanic_working_hours[]
  users                       users                         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ratings_reviews             ratings_reviews[]
  vehicle_maintenance_records vehicle_maintenance_records[]
}

model messages {
  id                                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sender_id                         String   @db.Uuid
  receiver_id                       String   @db.Uuid
  content                           String
  sent_at                           DateTime @default(now()) @db.Timestamptz(6)
  is_read                           Boolean? @default(false)
  users_messages_receiver_idTousers users    @relation("messages_receiver_idTousers", fields: [receiver_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_messages_sender_idTousers   users    @relation("messages_sender_idTousers", fields: [sender_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model model_years {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  model_id          String              @db.Uuid
  year              Int
  customer_vehicles customer_vehicles[]
  models            models              @relation(fields: [model_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  variants          variants[]
}

model models {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  brand_id          String              @db.Uuid
  name              String
  customer_vehicles customer_vehicles[]
  model_years       model_years[]
  brands            brands              @relation(fields: [brand_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model notifications {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String   @db.Uuid
  message    String
  type       String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  is_read    Boolean  @default(false)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model payments {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String    @db.Uuid
  amount     Decimal   @db.Decimal(10, 2)
  status     String    @db.VarChar(20)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model ratings_reviews {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  appointment_id    String?       @unique @db.Uuid
  mechanic_id       String        @db.Uuid
  customer_id       String        @db.Uuid
  rating            Int           @db.SmallInt
  review            String?
  created_at        DateTime      @default(now()) @db.Timestamptz(6)
  mechanic_response String?
  appointments      appointments? @relation(fields: [appointment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  customers         customers     @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  mechanics         mechanics     @relation(fields: [mechanic_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model refresh_tokens {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String   @db.Uuid
  hashed_token String
  expires_at   DateTime @db.Timestamptz(6)
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  users        users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user_auth {
  id                String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id           String  @db.Uuid
  password_hash     String?
  kvkk_approved     Boolean @default(false)
  is_phone_verified Boolean @default(false)
  is_banned         Boolean @default(false)
  cookies           Boolean @default(false)
  terms_approved    Boolean @default(false)
  e_mail_verified   Boolean @default(false)
  auth_provider     String  @default("local") @db.VarChar(50)
  provider_id       String?
  users             users   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user_sessions {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String    @db.Uuid
  device_id  String?
  ip_address String?
  user_agent String?
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  fcm_token  String?
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  id                                             String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  full_name                                      String
  phone_number                                   String?                @unique
  role                                           String
  profile_image                                  String?
  created_at                                     DateTime               @default(now()) @db.Timestamptz(6)
  e_mail                                         String                 @unique
  default_location_id                            String?                @db.Uuid
  customers                                      customers[]
  email_verifications                            email_verifications[]
  locations                                      locations[]
  mechanics                                      mechanics[]
  messages_messages_receiver_idTousers           messages[]             @relation("messages_receiver_idTousers")
  messages_messages_sender_idTousers             messages[]             @relation("messages_sender_idTousers")
  notifications                                  notifications[]
  password_reset_codes                           password_reset_codes[]
  payments                                       payments[]
  refresh_tokens                                 refresh_tokens[]
  user_auth                                      user_auth[]
  user_sessions                                  user_sessions[]
  locations_users_default_location_idTolocations locations?             @relation("users_default_location_idTolocations", fields: [default_location_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model variants {
  id                String              @id(map: "engines_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  model_year_id     String              @db.Uuid
  name              String
  customer_vehicles customer_vehicles[]
  model_years       model_years         @relation(fields: [model_year_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "engines_model_year_id_fkey")
}

model vehicle_maintenance_records {
  id                String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  vehicle_id        String            @db.Uuid
  mechanic_id       String            @db.Uuid
  service_date      DateTime?         @default(now()) @db.Timestamp(6)
  details           String
  cost              Decimal           @db.Decimal(10, 2)
  odometer          Int
  created_at        DateTime?         @default(now()) @db.Timestamp(6)
  next_due_date     DateTime?         @db.Timestamp(6)
  customer_id       String?           @db.Uuid
  appointment_id    String?           @unique(map: "unique_appointment_maintenance_record") @db.Uuid
  appointments      appointments?     @relation(fields: [appointment_id], references: [id], onUpdate: NoAction, map: "fk_vehicle_maintenance_records_appointment_id")
  customers         customers?        @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  mechanics         mechanics         @relation(fields: [mechanic_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  customer_vehicles customer_vehicles @relation(fields: [vehicle_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model email_verifications {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String    @db.Uuid
  token      String    @unique
  expires_at DateTime  @db.Timestamptz(6)
  created_at DateTime? @db.Timestamptz(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model mechanic_working_hours {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  mechanic_id   String    @db.Uuid
  day_of_week   Int
  start_time    String
  end_time      String
  slot_duration Int
  is_day_off    Boolean   @default(false)
  mechanics     mechanics @relation(fields: [mechanic_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([mechanic_id, day_of_week])
}

model password_reset_codes {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String   @db.Uuid
  reset_code  String   @db.VarChar(6)
  is_verified Boolean  @default(false)
  expires_at  DateTime @db.Timestamptz(6)
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  users       users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model locations {
  id                                         String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                                    String         @db.Uuid
  address                                    String
  latitude                                   Decimal?       @db.Decimal(9, 6)
  longitude                                  Decimal?       @db.Decimal(9, 6)
  label                                      String?
  created_at                                 DateTime?      @default(now()) @db.Timestamptz(6)
  city                                       String?
  district                                   String?
  appointments                               appointments[]
  users                                      users          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_users_default_location_idTolocations users[]        @relation("users_default_location_idTolocations")
}

model mechanic_categories {
  id          String     @id(map: "mechanic_categories_new_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  mechanic_id String     @db.Uuid
  category_id String     @db.Uuid
  created_at  DateTime?  @default(now()) @db.Timestamptz(6)
  categories  categories @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mechanic_categories_new_category_id_fkey")
  mechanics   mechanics  @relation(fields: [mechanic_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mechanic_categories_new_mechanic_id_fkey")

  @@unique([mechanic_id, category_id], map: "unique_mechanic_category")
}

model categories {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String
  parent_id           String?               @db.Uuid
  created_at          DateTime?             @default(now()) @db.Timestamptz(6)
  campaign_categories campaign_categories[]
  categories          categories?           @relation("categoriesTocategories", fields: [parent_id], references: [id], onUpdate: NoAction)
  other_categories    categories[]          @relation("categoriesTocategories")
  mechanic_categories mechanic_categories[]
}

model campaign_brands {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  campaign_id String    @db.Uuid
  brand_id    String    @db.Uuid
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  brands      brands    @relation(fields: [brand_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  campaigns   campaigns @relation(fields: [campaign_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([campaign_id, brand_id])
}

enum AppointmentType {
  AT_SERVICE
  ON_SITE
}
